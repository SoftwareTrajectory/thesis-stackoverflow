<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.softwaretrajectory.msr.stack.persistence">

	<select id="selectUsersForTimezone" resultType="com.softwaretrajectory.msr.stack.persistence.User">
		select * from
		users where locationId in
		(select id from locations where
		tzname=#{value});
	</select>

	<select id="selectLocationForNormalString"
		resultType="com.softwaretrajectory.msr.stack.persistence.Location">
		select * from locations where
		normalized_location=#{value}
	</select>

	<select id="NormalizeLocations" resultType="HashMap">
		select
		lower(location) as loc, count(id) as
		frequency
		from users where location
		is not null
		group by loc order by frequency desc
	</select>

	<select id="UpdateLocations" resultType="HashMap">
		select id,
		known_location from locations where
		tzname is null
	</select>

	<select id="checkLocationIsParsed" resultType="HashMap">
		select id from
		locations where
		normalized_location=#{value} limit 1
	</select>

	<select id="selectDistinctTimezones" resultType="String">
		select
		distinct(tzname) from locations where tzname is not null and length(tzname)>2
	</select>

	<update id="updateTimezone" parameterType="HashMap">
		update locations set
		`tzname`=#{timezoneId},
		`gmtoffset`=#{gmtOffset}
		where id=#{id}
	</update>

	<insert id="saveLocation" parameterType="HashMap"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO
		locations
		( `location` ,
		`normalized_location`, `known_location`)
		VALUES
		( #{location} ,
		#{tokens}, #{address})
	</insert>

</mapper>